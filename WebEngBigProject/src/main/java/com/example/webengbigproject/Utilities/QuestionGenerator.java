package com.example.webengbigproject.Utilities;

import com.example.webengbigproject.DataMuse.DataMuseResponse;
import com.example.webengbigproject.OpenTDB.OpenTDBService;
import com.example.webengbigproject.OpenTDB.OpenTriviaDBQuestion;
import com.example.webengbigproject.OpenTDB.OpenTriviaDBResponse;
import org.springframework.web.bind.annotation.RestController;

import java.util.ArrayList;
import java.util.Random;

/**
 * This class has functions that generate questions from API response data.
 * Different game modes determine the type and quantity of questions generated.
 * Game modes include: ARCADE, CHALLENGE, TIME-ATTACK etc.
 * @author Himanshu Bohra
 */
public class QuestionGenerator
{
    private static Random random = new Random();

    public QuestionGenerator()
    {

    }

    // TODO: Get responses from ALL APIs and then process/filter the responses to generate questions.
    /**
     * This generates questions from the given data. It will combine multiple responses into a single
     * questions list. This is a WORK IN PROGRESS.
     * @param openTrivia The response from OpenTriviaDB API.
     * @return Returns an ArrayList of Questions, generated from the API response data.
     */
    public static ArrayList<Question> generateQuestions(OpenTriviaDBResponse openTrivia)
    {
        ArrayList<OpenTriviaDBQuestion> openTDBQuestions = openTrivia.getResults();
        ArrayList<Question> questions = new ArrayList<Question>();
        Question question;

        // We will iterate over all the questions generated by opentriviaDB query and add them.
        for ( OpenTriviaDBQuestion eachQuestion : openTDBQuestions)
        {
            question = new Question();
            question._question = eachQuestion.getQuestion();
            question._correctAnswer = eachQuestion.getCorrectAnswer();
            question._incorrectAnswers = eachQuestion.getIncorrectAnswers();

            questions.add(question);
        }

        return questions;
    }

    // FIXME: Need a random unrelated word to query, so to get the incorrect defs.
    // Do we get /use two different queries? NO: We can use the amount parameter to get multi in same q.
    private static  void handleDataMuse(DataMuseResponse dataMuseResponse)
    {
        String word = dataMuseResponse.getWord();
        ArrayList<String> defs = dataMuseResponse.getDefs();

        Question question = new Question();
        question._question = "Which definition best describes the following word: " + word + "?";

        int randomIndex = random.nextInt(0, defs.size());
        question._correctAnswer = defs.get(randomIndex);

        // TODO: Use a random number generator to pick a definition (incorrect)

    }
}
